module BankIDL {

    typedef sequence<long> AccountList;

    enum TransactionResult {
        SUCCESS,
        ERROR_CLIENT_INEXISTANT,
        ERROR_ACCOUNT_INEXISTANT,
        ERROR_AMOUNT_INVALID,
        ERROR_ACCESS_DENIED,
        ERROR_ACCOUNT_DEST_INEXISTANT
    };

    enum TransactionType {
        WITHDRAW,
        DEPOSIT,
        TRANSFER
    };

    enum TransactionState {
        WAITING,
        CONFIRMED,
        CANCELED,
        DONE
    };

    struct BankTransaction {
        long id;
        long bankIdSrc;
        long bankIdDest;
        long accountIdSrc;
        long accountIdDest;
        double amount;
        TransactionType type;
        TransactionResult result;
        TransactionState state;
        string executionDate;
    };

    interface IBank {
        readonly attribute long bankId;
        long createClient();
        long openAccount(in long clientId);
        TransactionResult closeAccount(in long clientId, in long accountId);
        TransactionResult withdraw(in long clientId, in long accountId, in double amount);
        TransactionResult deposit(in long clientId, in long accountId, in double amount);
        double getAccountBalance(in long clientId, in long accountId);
        AccountList getAccountIds(in long clientId);
        void transfer(in long clientId, in long accountIdSrc, in long bankIdDest, in long accountIdDest, in double amount);

        // Préparation de la transaction sans l'exécuter
        oneway void prepareTransaction(in BankTransaction transaction);
        // Exécution de la transaction
        oneway void executeTransaction(in BankTransaction transaction);
    };

    interface IInterBank {
        typedef sequence <IBank> IBanks;
        readonly attribute IBanks banks;

        // Enregistrer une banque dans l'interbank
        void register(in IBank bank);

        // enregistrer une transaction à effectuer
        long registerTransaction(in BankTransaction transaction);
        // résultat de la transaction effectuée par la Banque
        void registeredTransaction(in long transactionId, in TransactionResult result);
    };
};

